=== SYSTEMS LTD PROJECT DOCUMENT ===
Project: Hami AIâ€‘assistant Platform
=== METADATA ===
{
  "document_type": "technical_runbook",
  "project_name": "Hami AI\u2011assistant Platform",
  "vendor": "Systems Ltd",
  "client": "Boston Health AI / Hami",
  "tech_stack": "React Native (mobile), React web, Node.js backend, AI/ML (Python?), unclear cloud provider",
  "project_code": "SL-5083-2024",
  "environment": "Production",
  "last_updated": "2025-01-13T18:25:50.914399",
  "version": "3.2",
  "support_contact": "Omar Farooq (Data Engineer)"
}

=== CONTENT ===
## Hami AI-Assistant Platform - Production
```
# React Native (mobile) config - may be outdated
# Last verified: unknown
```
 Runbook

**Project Code:** SL-5083-2024
**Client:** Boston Health AI / Hami
**Environment:** Production
**Last Updated:** 2024-07-26 (Manual Entry - Likely Outdated)

---

### 1. Introduction & Overview

This document provides operational guidance for the Hami AI-Assistant Platform in the production environment. It aims to assist Systems Ltd. engineers in maintaining, troubleshooting, and responding to incidents related to the platform.

**Project Description:**
Hami is an AI-powered physician assistant mobile and web application developed in partnership with Boston Health AI. It features a chat-based recommendation engine, symptom triage capabilities, and physician availability suggestions. Initial user feedback has been positive, but several technical defects have been reported in the early production build.

**Target Audience:** Systems Ltd. Operations and Support Engineers.

---

### 2. System Architecture (Conceptual - Diagrams Missing)

The Hami platform is a multi-component system. A high-level understanding of the architecture is crucial for effective troubleshooting.

*   **Frontend:**
    *   **Mobile App:** React Native (iOS & Android)
    *   **Web App:** React.js
*   **Backend:** Node.js (Express.js framework)
*   **AI/ML Services:** Primarily Python-based. Specific models and libraries are documented in the separate "Hami AI Model Deployment Guide" (Link: `\\internal-share\hami\ai_models\deployment_guide_v0.8.docx` - **NOTE: This link may be broken or point to an old version.**)
*   **Database:** PostgreSQL (Details in Section 4)
*   **Cloud Provider:** **ASSUMPTION:** Originally deployed on AWS. Current provider and specific services used are **UNCLEAR**. Initial setup was handled by the "Cloud Ops Team" (see Section 8).

---

### 3. Key Components & Services

*   **Hami API Gateway (Node.js):**
    *   **Purpose:** Entry point for all client requests. Handles authentication, rate limiting, and request routing.
    *   **Deployment:** Likely running on EC2 instances.
    *   **Version:** `v1.2.1` (Backend API)
*   **Hami Chat Service (Node.js):**
    *   **Purpose:** Manages chat interactions, AI model integration, and response generation.
    *   **Deployment:** Likely running on EC2 instances.
    *   **Version:** `v1.1.0` (Backend API)
*   **Hami Triage Engine (Python/ML):**
    *   **Purpose:** Processes user-reported symptoms and provides triage recommendations.
    *   **Deployment:** Details are **UNCLEAR**. May be running as separate microservices or integrated within the Node.js backend.
    *   **Version:** `v0.9.5` (AI Model - **NOTE: This is a development version, production version is unknown.**)
*   **Hami Physician Availability Service (Node.js):**
    *   **Purpose:** Fetches and suggests physician availability.
    *   **Deployment:** Likely running on EC2 instances.
    *   **Version:** `v1.0.0` (Backend API)
*   **Hami Mobile App (React Native):**
    *   **Purpose:** User-facing mobile application.
    *   **Version:** `v1.0.3` (iOS), `v1.0.2` (Android) - **NOTE: Significant version mismatch between platforms.**
*   **Hami Web App (React.js):**
    *   **Purpose:** User-facing web application.
    *   **Version:** `v1.1.0`

---

### 4. Database Management

*   **Database Type:** PostgreSQL
*   **Instance Name/Identifier:** `hami-prod-db-01` (Development environment used `hami-dev-db-01`)
*   **Credentials:** Stored in a secure vault. **TODO:** Implement automated credential rotation.
*   **Schema Version:** `v2.3` (Last confirmed update: 2024-05-15)
*   **Tribal Knowledge:** For complex SQL queries or performance tuning, **see Asif**. (Asif has left the company. **TODO:** Document Asif's knowledge or find
[LEGACY: Required for Boston Health AI / Hami integration]
 a replacement.)
*   **Backup Strategy:** Daily backups are scheduled. **TODO:** Verify backup integrity and retention policy.

---

### 5. Deployment & Release Management

*   **Current Production Version:**
    *   Mobile App: iOS `v1.0.3`, Android `v1.0.2`
    *   Web App: `v1.1.0`
    *   Backend Services: `v1.2.1` (API Gateway), `v1.1.0` (Chat), `v1.0.0` (Availability)
*   **Deployment Process:**
    1.  Build artifacts are generated using Jenkins (Job: `hami-prod-deploy`).
    2.  Deploy backend services to EC2 instances.
    3.  Deploy web app to S3/CloudFront.
    4.  Submit mobile app updates to app stores.
*   **Rollback Procedure:**
    1.  Stop current services.
    2.  Deploy previous stable version artifacts.
    3.  **TODO:** Automate rollback process.
*   **Hardcoded Values (Development Phase - Potentially in Production):**
    *   `API_KEY_DEV = "supersecretkey123"` (Check if this is still used in any service)
    *   `DEFAULT_USER_EMAIL = "test@example.com"`
    *   `MAX_RETRIES = 5` (This might be acceptable, but worth noting)

---

### 6. Monitoring & Alerting

*   **Monitoring Tools:**
    *   **Datadog:** Primary monitoring tool. Dashboards: `Hami Production Overview`, `Hami API Performance`.
    *   **CloudWatch:** Used for basic EC2 and RDS metrics.
    *   **Sentry:** For error tracking in frontend and backend.
*   **Key Metrics to Monitor:**
    *   API Latency (p95, p99)
    *   Error Rates (HTTP 5xx, 4xx)
    *   CPU/Memory Utilization (EC2 instances)
    *   Database Connection Count
    *   AI Model Inference Time
*   **Alerting Channels:**
    *   Email: `ops-alerts@systems.ltd`
    *   Slack: `#hami-prod-alerts` channel
*   **Alerting Thresholds:**
    *   API Latency > 500ms (p95) for 5 minutes.
    *   Error Rate > 2% for 10 minutes.
    *   **TODO:** Define specific alerts for AI model performance degradation.

---

### 7. Troubleshooting Guide

This section provides common troubleshooting steps. For more complex issues, refer to tribal knowledge or contact the relevant team.

**7.1. Users reporting slow response times in chat:**

1.  **Check Datadog:** Look for spikes in API Gateway or Chat Service latency.
2.  **Check AI Model Inference Time:** If inference time is high, the AI/ML service might be overloaded.
    *   **Action:** Investigate the Python/ML service logs. **See Priya for ML logs.** (Priya is no longer with Systems Ltd. **TODO:** Find someone to assist with ML logs.)
3.  **Check Database Load:** High database load can impact response times.
    *   **Action:** Connect to PostgreSQL and run `SELECT * FROM pg_stat_activity;` to check active connections and queries. **See Asif for DB issues.** (See Section 4 for Asif's status.)
4.  **Check Network Latency:** Ensure no network issues between services.

**7.2. Symptom Triage not providing accurate recommendations:**

1.  **Verify AI Model Version:** Ensure the correct AI model version is loaded in production.
    *   **Action:** Check the deployment configuration for the AI/ML service. **TODO:** Document the exact depl
<!-- TODO: Update diagram from outdated version -->
oyment mechanism for AI models.
2.  **Review Sentry for AI-related Errors:** Look for exceptions originating from the AI/ML components.
3.  **Input Data Validation:** Ensure user input is being correctly parsed and fed to the AI model.
    *   **Hardcoded Value Check:** Was `MAX_SYMPTOM_LENGTH = 200` enforced correctly?
4.  **Consult AI/ML Team:** If issues persist, escalate to the AI/ML development team. **Contact:** `ai-dev@systems.ltd` (This email address may be inactive).

**7.3. Mobile App Crashes (Specific to Android v1.0.2):**

*   **Issue:** Users on older Android versions are experiencing crashes when accessing the physician availability screen.
*   **Root Cause (Suspected):** A deprecated `setState` usage in `PhysicianList.js` might be causing issues with React Native's reconciliation process on older Android versions.
*   **Troubleshooting Steps:**
    1.  **Reproduce:** Attempt to reproduce the crash on an Android emulator running an older Android version (e.g., Android 8.0).
    2.  **Check Sentry:** Filter Sentry errors by Android `v1.0.2` and look for stack traces related to `PhysicianList.js`.
    3.  **Code Review:** Manually review `PhysicianList.js` for any instances of `this.setState` being called directly within lifecycle methods or event handlers without proper checks.
    4.  **Temporary Fix (if critical):** If a quick fix is needed, consider rolling back the mobile app to `v1.0.1` for Android. **TODO:** Implement a proper fix for the `setState` issue.

**7.4. Web App Login Issues:**

*   **Issue:** Some users are unable to log in via the web app.
*   **Troubleshooting Steps:**
    1.  **Check Backend Logs:** Examine the Node.js backend logs for authentication-related errors.
    2.  **Verify JWT Token Validity:** Ensure JWT tokens are being generated and validated correctly.
    3.  **Hardcoded Value Check:** Was the `JWT_SECRET = "my-super-secret-key-for-dev"` accidentally deployed to production? **This is a critical security risk if true.**
    4.  **Browser Cache:** Advise users to clear their browser cache and cookies.

---

### 8. Emergency Procedures

**8.1. Critical System Outage (All Services Down):**

1.  **Immediate Action:**
    *   Notify the on-call engineer.
    *   Attempt to restart all backend services.
    *   Check cloud provider status page (if known).
2.  **Escalation:**
    *   If services do not recover within 15 minutes, escalate to the Systems Ltd. Engineering Manager.
    *   Contact Boston Health AI / Hami primary point of contact: **Dr. Evelyn Reed** (Email: `evelyn.reed@bostonhealthai.com`, Phone: `+1 (617) 555-1212`). **NOTE:** Dr. Reed may have changed roles.
3.  **Diagnosis:**
    *   Identify the root cause: Database failure, network partition, critical service crash, etc.
    *   **TODO:** Define specific diagnostic steps for each potential failure point.
4.  **Recovery:**
    *   Restore services from backups if necessary.
    *   Apply hotfixes or rollbacks as required.
    *   **TODO:** Establish a clear communication plan with the client during outages.

**8.2. Data Breach / Security Incident:**

1.  **Immediate Action:**
    *   Isolate affected systems.
    *   Preserve all logs and evidence.
    *   Notify the Systems Ltd. Security Officer.
2.  **Escalation:**
    *   Contact Boston Health AI / Hami security lead: **Mr. David Chen** (Email: `david.chen@bostonhealthai.com`). **NOTE:** Mr. Chen may have left the client organization.
3.  **Investigation:**
    *   Determine the scope and nature of the breach.
    *   Identify the vulnerability exploited.
4.  **Remediation:**
    *   Patch vulnerabilities.
    *   Notify affected parties as per legal requirements.
    *   **TODO:** Develop a formal incident response plan for security incidents.

---

### 9. Contact Information

**Internal Systems Ltd. Contacts:**

*   **On-Call Engineer:** (Check PagerDuty/OpsGenie for current on-call)
*   **Engineering Manager:** Sarah Lee (Email: `sarah.lee@systems.ltd`)
*   **Database Administrator (Former):** Asif Khan (Contact: Unknown)
*   **AI/ML Lead (Former):** Priya Sharma (Contact: Unknown)

**Client Contacts (Boston Health AI / Hami):**

*   **Primary Technical Contact:** (Unknown - Last known was Dr. Evelyn Reed)
*   **Project Manager:** John Smith (Email: `john.smith@bostonhealthai.com`)
*   **Security Lead (Former):** Mr. David Chen (Contact: Unknown)

---

### 10. Known Issues & TODOs

*   **[TODO]** Implement automated credential rotation for database access.
*   **[TODO]** Verify backup integrity and retention policy for PostgreSQL.
*   **[TODO]** Document Asif's knowledge or find a replacement for DB issues.
*   **[TODO]** Automate the rollback process for deployments.
*   **[TODO]** Define specific alerts for AI model performance degradation.
*   **[TODO]** Document the exact deployment mechanism for AI models.
*   **[TODO]** Find someone to assist with ML logs.
*   **[TODO]** Implement a proper fix for the `setState` issue in `PhysicianList.js`.
*   **[TODO]** Develop a formal incident response plan for security incidents.
*   **[TODO]** Establish a clear communication plan with the client during outages.
*   **[TODO]** Clarify the current cloud provider and specific services used.
*   **[TODO]** Update all contact information to current personnel.
*   **[TODO]** Create and link architecture diagrams.
*   **[TODO]** Address the version mismatch between iOS and Android mobile apps.
*   **[TODO]** Investigate the potential use of hardcoded development API keys in production.
*   **[TODO]** Deprecated Method: `this.setState` is still listed as a primary method for state updates in React Native components. This needs to be refactored to use functional components and hooks where possible.

---

**End of Runbook**